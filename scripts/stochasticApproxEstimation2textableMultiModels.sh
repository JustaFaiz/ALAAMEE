#!/bin/sh
#
# File:    stochasticApproxEstimation2textableMultiModels.sh
# Author:  Alex Stivala
# Created: October 2022
#
#
# Read output of estimateALAAMSA.run_on_network_attr() with point
# estimate, estimated std. error and t-ratio computed from Stochastic
# Approximation algorithm for ALAAM and build LaTeX table for multiple
# different models
# 
# Usage: stochasticApproxEstimation2textableMultiModels.sh estimationoutputfile_model1 estimationoutputfile_model2 ...
#
# E.g.:
#   stochasticApproxEstimation2textableMultiModels.sh  estimation.out model2/estimation.out
#
# Output is to stdout
#
# Uses various GNU utils options on echo, etc.


if [ $# -lt 1 ]; then
    echo "usage: $0 estimation1.out estimation2.out ..." >&2
    exit 1
fi

num_models=`expr $#`

tmpfile=`mktemp`

echo "% Generated by: $0 $*"
echo "% At: " `date`
echo "% On: " `uname -a`

echo -n '\begin{tabular}{l'
i=1
while [ $i -le $num_models ]
do
  echo -n r
  i=`expr $i + 1`
done
echo '}'
echo '\hline'  
echo -n 'Effect '
i=1
while [ $i -le $num_models ]
do
  echo -n " & Model $i"
  i=`expr $i + 1`
done
echo '\\'
echo '\hline'  

#
# Estimation output looks like this:
#...
# Total estimation time ( 3 runs) was 71352.1231713295 s
# Converged.
#                                 Estimate  Std.Error t-ratio
#              bipartiteDensityA  -1.840     0.086     0.041 *
#             bipartiteActivityA  -0.870     0.104     0.018 *
#           bipartiteEgoTwoStarA   0.025     0.026    -0.041
#         bipartiteEgoThreeStarA  -0.003     0.002    -0.059
#        bipartiteAlterTwoStar1A   0.227     0.018     0.012 *
#        bipartiteAlterTwoStar2A  -0.104     0.030     0.024 *
#           bipartiteFourCycle1A  -0.008     0.021     0.011
#           bipartiteFourCycle2A  -0.018     0.050    -0.012
#                        age_oOc  -0.014     0.001    -0.028 *
#               notAustralia_oOb   0.098     0.073     0.043
#                betweenness_oOc  -0.000     0.000    -0.037
#
# Running goodness-of-fit test...
#...
#
# We will parse from after the "Converged." and header line to get
# parameter names, point estimates and standard error estimates.
#


model=1
for estimationresults in $*
do
    cat ${estimationresults} | sed -n -e '/^Converged/,/^$/{p}' | sed '1d;$d'  | fgrep -vw 'Estimate' | awk '{print $1,$2,$3,$4,$5}'  |  tr ' ' '\t' | sed "s/^/${model}\t/" >> ${tmpfile}
    model=`expr $model + 1`
done


effectlist=`cat ${tmpfile} | awk '{print $2}' | sort | uniq`

for effect in ${effectlist}
do
    model=1
    echo -n "${effect} " | tr '_' ' '
    while [ $model -le $num_models ]; 
    do
        point=`grep -w ${effect} ${tmpfile} | awk -vmodel=$model '$1 == model {print $3}'`
        stderr=`grep -w ${effect} ${tmpfile} | awk -vmodel=$model '$1 == model {print $4}'`
        tratio=`grep -w ${effect} ${tmpfile} | awk -vmodel=$model '$1 == model {print $5}'`
        signif=`grep -w ${effect} ${tmpfile} | awk -vmodel=$model '$1 == model {print $6}'`
        if [ "${point}" == "" ];  then
            echo -n " & ---"
        else 
            # put statistically significant results in "\heavy",
            # which might be defined as e.g.
            # \newcommand{\heavy}[1]{\mathbf{#1}} 
            # and others
            # in "\light" which might be defined as e.g.
            # \newcommand{\light}[1]{\textcolor{gray}{#1}}
            # which requires \usepackage{xcolor} (NB color package does not have gray)
            # (note usually
            # one of \heavy or \light could just be defined as e.g.
            # \newcommand{\light}[1]{#1}
            # so that (in this case) light is normal, heavy is bold).
            
            point=`echo "${point}" | sed -e 's/[eE]+*/*10^/'`
            tratio=`echo "${tratio}" | sed -e 's/[eE]+*/*10^/'`
            stderr=`echo "${stderr}" | sed -e 's/[eE]+*/*10^/'`
            if [ "${signif}" = '*' ]; then
                printf ' & $\\heavy{\\underset{(%.3f)}{%.3f}}$' ${stderr} ${point}
            else
                printf ' & $\\light{\\underset{(%.3f)}{%.3f}}$' ${stderr} ${point}   
            fi
        fi
        model=`expr $model + 1`
    done
    echo '\\'
done

echo '\hline'  
echo '\end{tabular}'

rm ${tmpfile}
